version: 2.1

orbs:
  node: circleci/node@5.0.2

# -------------------- ANDROID --------------------
jobs:
  android-e2e:
    docker:
      - image: cimg/android:2024.04
    resource_class: medium
    environment:
      JVM_OPTS: -Xmx4096m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true
    steps:
      - checkout
      - run:
          name: Install Node.js 20 and Yarn
          command: |
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g yarn
            yarn -v

      - run:
          name: Show environment info
          command: |
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            yarn install --frozen-lockfile

      - save_cache:
          paths:
            - node_modules
            - ~/.cache/expo
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Install Maestro
          command: |
            curl -Ls "https://get.maestro.mobile.dev" | bash
            export PATH="$HOME/.maestro/bin:$PATH"
            echo 'export PATH="$HOME/.maestro/bin:$PATH"' >> $BASH_ENV

      - run:
          name: Prebuild Android
          command: npx expo prebuild --platform android
      
      - run:
          name: Configure Gradle for CI
          command: |
            echo "‚öôÔ∏è Configuring Gradle for CI environment..."
            echo "# CI Optimizations" >> android/gradle.properties
            echo "org.gradle.jvmargs=-Xmx4G -Dkotlin.daemon.jvm.options=-Xmx2G -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC -Dfile.encoding=UTF-8" >> android/gradle.properties
            echo "org.gradle.daemon=false" >> android/gradle.properties
            echo "org.gradle.parallel=true" >> android/gradle.properties
            echo "org.gradle.configureondemand=true" >> android/gradle.properties
            echo "android.enableBuildCache=false" >> android/gradle.properties

      - run:
          name: Build Android APK (Release)
          command: |
            cd android
            echo "üèóÔ∏è Building Android APK..."
            SENTRY_DISABLE_AUTO_UPLOAD=true ./gradlew clean assembleRelease \
              --no-daemon \
              --max-workers=2 \
              --console=plain
            echo "‚úÖ APK build completed"

      - run:
          name: Setup Android Emulator (Skip Boot Wait)
          command: |
            echo "üöÄ Setting up Android emulator..."
            export ANDROID_HOME=$ANDROID_SDK_ROOT
            
            # Download command-line tools
            mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
            cd "$ANDROID_HOME/cmdline-tools"
            wget -q -O commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
            unzip -q -o commandlinetools.zip -d latest
            rm commandlinetools.zip
            cd -
            
            export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH
            
            # Accept licenses
            yes | sdkmanager --licenses --sdk_root=$ANDROID_HOME || true
            
            # Install packages
            sdkmanager --install "platform-tools" "emulator" "platforms;android-34" "system-images;android-34;google_apis;x86_64" --sdk_root=$ANDROID_HOME
            
            # Create emulator
            avdmanager create avd -n test -k "system-images;android-34;google_apis;x86_64" --device "pixel" -f
            
            echo "üöÄ Starting Android emulator (quick start)..."
            # Start emulator and proceed without waiting for full boot
            nohup emulator -avd test -no-audio -no-boot-anim -no-window -gpu swiftshader_indirect -memory 1024 > /dev/null 2>&1 &
            
            # Wait briefly for device to be recognized
            sleep 30
            
            # Force device recognition and proceed
            adb kill-server
            adb start-server
            sleep 5
            
            echo "üéØ Proceeding with installation - emulator starting in background"
            
      - run:
          name: Install App on Emulator
          command: |
            APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" | head -1)
            echo "‚úÖ Found APK: $APK_PATH"
            adb devices
            adb install "$APK_PATH"
            sleep 30
      - run:
          name: Run Maestro Tests (Android)
          command: |
            export PATH="$HOME/.maestro/bin:$PATH"
            maestro test .maestro/ --format junit --output android-results.xml
      - run:
          name: Quit Android Emulator
          command: |
            echo "üõë Quitting Android Emulator..."
            pkill -f "emulator" || true
            pkill -f "qemu" || true
            echo "‚úÖ Android Emulator quit successfully"
      - store_test_results:
          path: android-results.xml

# -------------------- iOS --------------------
  ios-e2e:
    macos:
      xcode: "16.2.0"
    steps:
      - checkout
      - run:
          name: Show environment info
          command: |
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            xcodebuild -version

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            npm install -g yarn
            yarn install --frozen-lockfile

      - save_cache:
          paths:
            - node_modules
            - ~/.cache/expo
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Install Maestro
          command: |
            curl -Ls "https://get.maestro.mobile.dev" | bash
            export PATH="$HOME/.maestro/bin:$PATH"
            echo 'export PATH="$HOME/.maestro/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Setup Node.js
          command: |
            node -v
            npm install -g yarn
      - run:
          name: Prebuild iOS
          command: npx expo prebuild --platform ios
      - run:
          name: Install CocoaPods
          command: |
            cd ios
            pod install
            cd ..
      - run:
          name: Boot iPhone Simulator
          command: |
            #!/bin/bash
            set -e
            echo "üîç Booting iPhone 16 Pro Max (18.2)..."
      
            # Use the exact device ID for iPhone 16 Pro Max
            DEVICE_ID="E478EC29-38BB-424F-B32D-349FBEA16C8F"
            DEVICE_NAME="iPhone 16 Pro Max"
            
            # Boot this specific device
            xcrun simctl boot "$DEVICE_ID"
            sleep 25
            
            echo "$DEVICE_NAME" > .current_simulator_name
            echo "$DEVICE_ID" > .current_simulator_id
            echo "‚úÖ Simulator ready: $DEVICE_NAME [$DEVICE_ID]"
      - run:
          name: Build iOS app (Release)
          command: |
            cd ios
            echo "üöÄ Starting Xcode build (minimal logs)..."
            gem install xcpretty --no-document

            # Read the device ID we booted
            DEVICE_ID=$(cat ../.current_simulator_id)
            
            # Use device ID directly
            DESTINATION="platform=iOS Simulator,id=$DEVICE_ID"

            set -o pipefail
            SENTRY_DISABLE_AUTO_UPLOAD=true \
            SENTRY_ALLOW_FAILURE=true \
            xcodebuild \
              -workspace *.xcworkspace \
              -scheme "gluestackuiboilerplate" \
              -configuration Release \
              -sdk iphonesimulator \
              -destination "$DESTINATION" \
              -derivedDataPath build \
              ENABLE_TESTABILITY=YES \
              clean build \
              | xcpretty --color --simple --report junit --output ../xcodebuild-results.xml
      - run:
          name: Install and Launch App on Simulator
          command: |
            cd ios
            APP_PATH=$(find build -name "*.app" -type d | head -1)
            if [ -z "$APP_PATH" ]; then
              echo "‚ùå No .app found"
              exit 1
            fi
            echo "‚úÖ Found app: $APP_PATH"
            DEVICE_ID=$(cat ../.current_simulator_id)
            xcrun simctl install "$DEVICE_ID" "$APP_PATH"
            sleep 20
      - run:
          name: Run Maestro Tests (iOS)
          command: |
            export PATH="$HOME/.maestro/bin:$PATH"
            DEVICE_ID=$(cat .current_simulator_id)
            echo "Running tests on simulator: $DEVICE_ID"
            maestro test .maestro/ --format junit --output ios-results.xml

      - run:
          name: Quit iOS Simulator
          command: |
            echo "üõë Quitting iOS Simulator..."
            xcrun simctl shutdown all
            pkill -f "Simulator" || true
            echo "‚úÖ Simulator quit successfully"
      - store_test_results:
          path: ios-results.xml

# -------------------- WORKFLOW --------------------
workflows:
  version: 2
  e2e:
    jobs:
      - android-e2e
      # - ios-e2e
