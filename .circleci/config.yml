version: 2.1

orbs:
  node: circleci/node@5.0.2

# -------------------- ANDROID --------------------
jobs:
  android-e2e:
    machine:
      image: android:2024.04.1
    resource_class: large
    environment:
      JVM_OPTS: -Xmx6144m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true
    steps:
      - checkout
      - run:
          name: Install Node.js 20.18.1
          command: |
            echo "‚öôÔ∏è Installing Node.js 20.18.1 with NVM..."
            
            # Use NVM for reliable version management
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 20.18.1
            nvm use 20.18.1
            
            # Persist for all steps
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm use 20.18.1' >> $BASH_ENV
            
            corepack disable
            npm install -g yarn@1.22.22
            
            echo "‚úÖ Node: $(node --version)"
            echo "‚úÖ Yarn: $(yarn --version)"


      - run:
          name: Show environment info
          command: |
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            echo "üì± Android Machine Image Environment"
            echo "Java version: $(java -version 2>&1 | head -1)"
            echo "Android SDK: $ANDROID_SDK_ROOT"
            echo "Available system images:"
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images" || true

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            yarn install --frozen-lockfile

      - save_cache:
          paths:
            - node_modules
            - ~/.cache/expo
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Install Maestro
          command: |
            curl -Ls "https://get.maestro.mobile.dev" | bash
            export PATH="$HOME/.maestro/bin:$PATH"
            echo 'export PATH="$HOME/.maestro/bin:$PATH"' >> $BASH_ENV

      - run:
          name: Prebuild Android
          command: npx expo prebuild --platform android

      - run:
          name: Install required Android SDK components
          command: |
            echo "üì¶ Installing required Android SDK components..."
            # Accept licenses first
            yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
            
            # Install specific system image if needed
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "system-images;android-33;google_apis;x86_64"
            
            echo "‚úÖ Android SDK components installed"

      - run:
          name: Setup Android Emulator
          command: |
            echo "üöÄ Setting up Android emulator..."
            
            # Create AVD
            echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager create avd \
              -n test \
              -k "system-images;android-33;google_apis;x86_64" \
              --device "pixel_5" \
              --force
            
            # Start emulator with proper options
            $ANDROID_SDK_ROOT/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader_indirect -no-snapshot &
            EMULATOR_PID=$!
            echo $EMULATOR_PID > /tmp/emulator_pid
            
            # Wait for device to be ready
            echo "‚è≥ Waiting for emulator to boot..."
            $ANDROID_SDK_ROOT/platform-tools/adb wait-for-device
            sleep 30
            
            # Check if device is fully booted
            $ANDROID_SDK_ROOT/platform-tools/adb shell getprop sys.boot_completed | grep 1
            echo "üéØ Emulator ready for installation"

      - run:
          name: Build Android APK (Release)
          command: |
            cd android
            echo "üèóÔ∏è Building Release APK on Android Machine..."
            SENTRY_DISABLE_AUTO_UPLOAD=true ./gradlew clean assembleRelease \
              --no-daemon \
              --max-workers=4 \
              -Dorg.gradle.jvmargs="-Xmx6144m" \
              --console=plain
            echo "‚úÖ APK build completed"

      - run:
          name: Install App on Emulator
          command: |
            APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" | head -1)
            echo "‚úÖ Found APK: $APK_PATH"
            $ANDROID_SDK_ROOT/platform-tools/adb devices
            $ANDROID_SDK_ROOT/platform-tools/adb install -r "$APK_PATH"
            echo "‚úÖ APK installed successfully"
            sleep 30
      - run:
          name: Run Maestro Tests (Android)
          command: |
            export PATH="$HOME/.maestro/bin:$PATH"
            maestro test .maestro/ --format junit --output android-results.xml
      - run:
          name: Quit Android Emulator
          command: |
            echo "üõë Quitting Android Emulator..."
            pkill -f "emulator" || true
            pkill -f "qemu" || true
            echo "‚úÖ Android Emulator quit successfully"
      - store_test_results:
          path: android-results.xml

# -------------------- iOS --------------------
  ios-e2e:
    macos:
      xcode: "16.2.0"
    steps:
      - checkout
      - run:
          name: Show environment info
          command: |
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            xcodebuild -version

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            npm install -g yarn
            yarn install --frozen-lockfile

      - save_cache:
          paths:
            - node_modules
            - ~/.cache/expo
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Install Maestro
          command: |
            curl -Ls "https://get.maestro.mobile.dev" | bash
            export PATH="$HOME/.maestro/bin:$PATH"
            echo 'export PATH="$HOME/.maestro/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Setup Node.js
          command: |
            node -v
            npm install -g yarn
      - run:
          name: Prebuild iOS
          command: npx expo prebuild --platform ios
      - run:
          name: Install CocoaPods
          command: |
            cd ios
            pod install
            cd ..
      - run:
          name: Boot iPhone Simulator
          command: |
            #!/bin/bash
            set -e
            echo "üîç Booting iPhone 16 Pro Max (18.2)..."
      
            # Use the exact device ID for iPhone 16 Pro Max
            DEVICE_ID="E478EC29-38BB-424F-B32D-349FBEA16C8F"
            DEVICE_NAME="iPhone 16 Pro Max"
            
            # Boot this specific device
            xcrun simctl boot "$DEVICE_ID"
            sleep 25
            
            echo "$DEVICE_NAME" > .current_simulator_name
            echo "$DEVICE_ID" > .current_simulator_id
            echo "‚úÖ Simulator ready: $DEVICE_NAME [$DEVICE_ID]"
      - run:
          name: Build iOS app (Release)
          command: |
            cd ios
            echo "üöÄ Starting Xcode build (minimal logs)..."
            gem install xcpretty --no-document

            # Read the device ID we booted
            DEVICE_ID=$(cat ../.current_simulator_id)
            
            # Use device ID directly
            DESTINATION="platform=iOS Simulator,id=$DEVICE_ID"

            set -o pipefail
            SENTRY_DISABLE_AUTO_UPLOAD=true \
            SENTRY_ALLOW_FAILURE=true \
            xcodebuild \
              -workspace *.xcworkspace \
              -scheme "gluestackuiboilerplate" \
              -configuration Release \
              -sdk iphonesimulator \
              -destination "$DESTINATION" \
              -derivedDataPath build \
              ENABLE_TESTABILITY=YES \
              clean build \
              | xcpretty --color --simple --report junit --output ../xcodebuild-results.xml
      - run:
          name: Install and Launch App on Simulator
          command: |
            cd ios
            APP_PATH=$(find build -name "*.app" -type d | head -1)
            if [ -z "$APP_PATH" ]; then
              echo "‚ùå No .app found"
              exit 1
            fi
            echo "‚úÖ Found app: $APP_PATH"
            DEVICE_ID=$(cat ../.current_simulator_id)
            xcrun simctl install "$DEVICE_ID" "$APP_PATH"
            sleep 20
      - run:
          name: Run Maestro Tests (iOS)
          command: |
            export PATH="$HOME/.maestro/bin:$PATH"
            DEVICE_ID=$(cat .current_simulator_id)
            echo "Running tests on simulator: $DEVICE_ID"
            maestro test .maestro/ --format junit --output ios-results.xml

      - run:
          name: Quit iOS Simulator
          command: |
            echo "üõë Quitting iOS Simulator..."
            xcrun simctl shutdown all
            pkill -f "Simulator" || true
            echo "‚úÖ Simulator quit successfully"
      - store_test_results:
          path: ios-results.xml

# -------------------- WORKFLOW --------------------
workflows:
  version: 2
  e2e:
    jobs:
      - android-e2e
      # - ios-e2e
